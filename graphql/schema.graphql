
type Query {
    "Find a single task by an identifying attribute."
    task( id: ID @eq): Task @find @guard(with: ["sanctum"]) @can(ability: "view", resolved: true)

    "List multiple tasks."
    tasks(
      "Filters by title. Accepts SQL LIKE wildcards `%` and `_`."
      title: String @where(operator: "like")
    ): [Task!]! @paginate(defaultCount: 10) @guard(with: ["sanctum"]) @can(ability: "view", resolved: true)

    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}


type Mutation {
  login(input: LoginInput!) : AuthPayload! 
  registerUser(input: CreateUserInput!) : User! 
   createTask(input: TaskPayload!): Task  @guard(with: ["sanctum"])
    updateTask(id: ID!, input: TaskPayload!): Task  @guard(with: ["sanctum"])
    deleteTask(id: ID!): Task @guard(with: ["sanctum"])
}



#import models/*.graphql

